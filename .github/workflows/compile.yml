name: Make nabu Recovery

on:
  workflow_call:
    inputs:
      LIBRARY_NAME:
        description: 'LIBRARY_NAME'
        required: true
        default: 'omni'
      LIBRARY_URL:
        description: 'LIBRARY_URL'
        required: true
        default: 'https://github.com/PitchBlackRecoveryProject/manifest_pb'
      LIBRARY_BRANCH:
        description: 'LIBRARY_BRANCH'
        required: true
        default: 'android-11.0'
      DEVICE_URL:
        description: 'DEVICE_URL'
        required: true
        default: 'https://github.com/koumaza/pb_device_xiaomi_nabu'
      DEVICE_BRANCH:
        description: 'DEVICE_BRANCH'
        required: true
        default: '11'
      DEVICE_PATH:
        description: 'DEVICE_PATH'
        required: true
        default: 'device/xiaomi/nabu'
      DEVICE_NAME:
        description: 'DEVICE_NAME'
        required: true
        default: 'nabu'
  workflow_dispatch:
    inputs:
      LIBRARY_NAME:
        description: 'LIBRARY_NAME'
        required: true
        default: 'omni'
      LIBRARY_URL:
        description: 'LIBRARY_URL'
        required: true
        default: 'https://github.com/PitchBlackRecoveryProject/manifest_pb'
      LIBRARY_BRANCH:
        description: 'LIBRARY_BRANCH'
        required: true
        default: 'android-11.0'
      DEVICE_URL:
        description: 'DEVICE_URL'
        required: true
        default: 'https://github.com/koumaza/pb_device_xiaomi_nabu'
      DEVICE_BRANCH:
        description: 'DEVICE_BRANCH'
        required: true
        default: '11'
      DEVICE_PATH:
        description: 'DEVICE_PATH'
        required: true
        default: 'device/xiaomi/nabu'
      DEVICE_NAME:
        description: 'DEVICE_NAME'
        required: true
        default: 'nabu'

env:
  TZ: Asia/Tokyo
  
jobs:
  build:
    if: github.event.repository.owner.id == github.event.sender.id
    runs-on: ubuntu-20.04
    
    steps:
    - name: Maximize build disk space
      uses: easimon/maximize-build-space@v5
      with:
        root-reserve-mb: 1024
        swap-size-mb: 6144
        remove-dotnet: 'true'
        temp-reserve-mb: 1024
        remove-android: 'true'
        remove-haskell: 'true'

    - name: Check Out
      uses: actions/checkout@main
      
    - name: ccache
      uses: hendrikmuhs/ccache-action@main

    - name: Prepare the environment
      run: |
        docker rmi `docker images -q`
        sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/sudo apt/sources.list.d
        sudo apt -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php*
        sudo apt -y autoremove --purge
        sudo apt -y autoclean
        sudo apt clean
        sudo apt update
        sudo apt -y install android-tools-adb bc bison build-essential curl flex gcc-multilib git g++-multilib gnupg gperf imagemagick lib32ncurses-dev lib32readline-dev lib32z1-dev liblz4-tool libncurses5 libncurses5-dev libsdl1.2-dev libssl-dev libtinfo5 libxml2 libxml2-utils lzop openjdk-8-jdk openssh-server pngcrush python rsync schedtool screen squashfs-tools xsltproc yasm zip zlib1g-dev bash-completion bc bison build-essential ccache curl flex gcc-multilib git git-core g++-multilib gnupg gperf imagemagick jq lib32ncurses5-dev lib32readline-dev lib32z1-dev lib32z-dev libbz2-dev libc6-dev-i386 libgl1-mesa-dev liblz4-tool libncurses5-dev libsdl1.2-dev libssl-dev libwxgtk3.0-gtk3-dev libx11-dev libxml2 libxml2-utils lzma lzop ncftp openjdk-8-jdk pngcrush python qemu-user-static rsync schedtool squashfs-tools tree unzip x11proto-core-dev xsltproc zip zlib1g-dev
      
    - name: Set variables
      run: |
        echo "::set-output name=date::$(date +%F)"
      id: var
      
    - name: Install repo
      run: |
        mkdir ~/bin
        curl https://storage.googleapis.com/git-repo-downloads/repo > ~/bin/repo
        chmod a+x ~/bin/repo
        export PATH=~/bin:$PATH
      
    - name: Initialize repo
      run: |
        PATH=~/bin:$PATH
        mkdir workspace
        cd workspace
        echo "::set-output name=pwd::$(pwd)"
        git config --global user.name "an"
        git config --global user.email "an@example.com"
        repo init --depth=1 -u ${{ github.event.inputs.LIBRARY_URL }} -b ${{ github.event.inputs.LIBRARY_BRANCH }}
      id: pwd
          
    - name: Repo Sync
      run: |
        PATH=~/bin:$PATH
        cd workspace
        repo sync -j$(nproc --all) --force-sync
      
    - name: Clone device
      run: |
        PATH=~/bin:$PATH
        cd ${{ steps.pwd.outputs.pwd }}
        git clone ${{ github.event.inputs.DEVICE_URL }} -b ${{ github.event.inputs.DEVICE_BRANCH }} ./${{ github.event.inputs.DEVICE_PATH }}
        git clone https://github.com/LineageOS/android_hardware_xiaomi.git -b lineage-18.1 ./hardware/xiaomi
        git clone https://github.com/bm0x/android_vendor_xiaomi_sm8150-common -b 11 vendor/xiaomi/sm8150-common
        git clone https://github.com/bm0x/android_device_xiaomi_sm8150-common -b lineage-18.1 device/xiaomi/sm8150-common
        git clone https://github.com/LineageOS/android_device_qcom_sepolicy_vndr -b lineage-18.1 device/qcom/sepolicy_vndr
        git clone https://github.com/PixelExperience/hardware_qcom-caf_sm8150_display -b eleven hardware/qcom-caf/sm8150/display
        
    - name: Building
      shell: bash
      run: |
        PATH=~/bin:$PATH
        cd ${{ steps.pwd.outputs.pwd }}
        export USE_CCACHE=1
        export CCACHE_DIR=${{ steps.pwd.outputs.pwd }}../.ccache
        export CCACHE_EXEC=$(type -p ccache)
        export CCACHE_COMPRESS=1
        ccache -M 35G
        export ALLOW_MISSING_DEPENDENCIES=true
        export LC_ALL=C
        source build/envsetup.sh
        lunch ${{ github.event.inputs.LIBRARY_NAME }}_${{ github.event.inputs.DEVICE_NAME }}-eng
        make clean && make clobber
        mka adbd bootimage -j$(nproc --all)
        
    - name: Upload to Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          workspace/out/target/product/${{ github.event.inputs.DEVICE_NAME }}/*.zip
          workspace/out/target/product/${{ github.event.inputs.DEVICE_NAME }}/boot.img
        name: ${{ github.event.inputs.DEVICE_NAME }}-${{ github.run_id }}
        tag_name: ${{ github.run_id }}
        body: Recovery for ${{ github.event.inputs.DEVICE_NAME }}
      env:
        GITHUB_TOKEN: ${{ secrets.work }}
